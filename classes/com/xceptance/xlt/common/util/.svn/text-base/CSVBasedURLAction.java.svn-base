package com.xceptance.xlt.common.util;

import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.regex.Pattern;

import org.apache.commons.csv.CSVRecord;
import org.apache.commons.lang.StringUtils;

import com.gargoylesoftware.htmlunit.HttpMethod;
import com.gargoylesoftware.htmlunit.util.NameValuePair;
import com.xceptance.common.util.RegExUtils;
import com.xceptance.xlt.api.validators.HttpResponseCodeValidator;
import com.xceptance.xlt.common.util.bsh.ParamInterpreter;

public class CSVBasedURLAction
{
    public static final String GET = "GET";
    public static final String POST = "POST";
    
    public static final String NAME = "Name";

    public static final String URL = "URL";

    public static final String METHOD = "Method";

    public static final String PARAMETERS = "Parameters";

    public static final String RESPONSECODE = "ResponseCode";

    public static final String XPATH = "XPath";

    public static final String REGEXP = "RegExp";

    public static final String TEXT = "Text";

    public static final String ENCODED = "Encoded";

    private final String name;

    private final URL url;
    private final String urlString;

    private final String method;

    private final List<NameValuePair> parameters;

    private final HttpResponseCodeValidator httpResponseCodeValidator;

    private final String xPath;

    private final String regexpString;
    private final Pattern regexp;

    private final String text;

    private final boolean encoded;
    
    /**
     * Our bean shell 
     */
    private final ParamInterpreter interpreter;

    /**
     * Constructor based upon read CSV data
     * 
     * @param record the record to process
     * @param interpreter the bean shell interpreter to use
     * 
     * @throws UnsupportedEncodingException
     * @throws MalformedURLException
     */
    public CSVBasedURLAction(final CSVRecord record, final ParamInterpreter interpreter) throws UnsupportedEncodingException, MalformedURLException
    {
        // no bean shell, so we do not do anything
        this.interpreter = interpreter;

        // the header is record 1, so we have to subtract one, for autonaming
        this.name = StringUtils.defaultIfBlank(record.get(NAME), "Action-" + (record.getRecordNumber() - 1)); 

        this.urlString = record.get(URL);
        if (interpreter == null)
        {
            this.url = new URL(record.get(URL));
        }
        else
        {
            this.url = null;
        }
        
        this.method = StringUtils.defaultIfBlank(record.get(METHOD), GET);
        this.httpResponseCodeValidator = StringUtils.isNotBlank(record.get(RESPONSECODE)) ?  new HttpResponseCodeValidator(Integer.parseInt(record.get(RESPONSECODE))) : HttpResponseCodeValidator.getInstance();

        // compile pattern only, if no interpreter shall be used
        this.regexpString = StringUtils.isNotEmpty(record.get(REGEXP)) ? record.get(REGEXP) : null;
        if (interpreter == null)
        {
            this.regexp = StringUtils.isNotEmpty(regexpString) ? RegExUtils.getPattern(regexpString) : null;
        }
        else
        {
            this.regexp = null;
        }
        
        this.xPath  = StringUtils.isNotBlank(record.get(XPATH)) ? record.get(XPATH) : null;
        this.text  = StringUtils.isNotEmpty(record.get(TEXT)) ? record.get(TEXT) : null;
        this.encoded  = StringUtils.isNotBlank(record.get(ENCODED)) ? Boolean.parseBoolean(record.get(ENCODED)) : false;
        
        // ok, this is the tricky part
        this.parameters = StringUtils.isNotEmpty(record.get(PARAMETERS)) ? setupParameters(record.get(PARAMETERS)) : null;
    }
    
    /**
     * Constructor based upon read CSV data
     * @param record
     * @throws UnsupportedEncodingException
     * @throws MalformedURLException
     */
    public CSVBasedURLAction(final CSVRecord record) throws UnsupportedEncodingException, MalformedURLException
    {
        this(record, null);
    }  

    /**
     * Takes the list of parameters and turns it into name value pairs for later usage.
     * 
     * @param paramers the csv definition string of parameters
     * @return a list with parsed key value pairs
     * @throws UnsupportedEncodingException 
     */
    private List<NameValuePair> setupParameters(final String parameters) throws UnsupportedEncodingException
    {
        final List<NameValuePair> list = new ArrayList<NameValuePair>();
        
        // ok, turn them into & split strings
        final StringTokenizer tokenizer = new StringTokenizer(parameters, "&");
        while (tokenizer.hasMoreTokens())
        {
            final String token = tokenizer.nextToken();
            
            // the future pair
            String key = null;
            String value = null;
            
            // split it into key and value at =
            final int pos = token.indexOf("=");
            if (pos >= 0)
            {
                key = token.substring(0, pos);
                if (pos < token.length() - 1)
                {
                    value = token.substring(pos + 1);
                }
            }
            else
            {
                key = token;
            }
            
            // ok, if this is encoded, we have to decode it again, because the httpclient will encode it
            // on its own later on
            if (encoded)
            {
                key = key != null ? URLDecoder.decode(key, "UTF-8") : null;
                value = value != null ? URLDecoder.decode(value, "UTF-8") : "";
            }
            if (key != null)
            {
                list.add(new NameValuePair(key, value));
            }
        }
        
        return list;
    }
    
    public String getName()
    {
        return name;
    }

    public URL getURL() throws MalformedURLException
    {
        // process bean shell part
        return interpreter != null ? new URL(interpreter.processDynamicData(urlString)) : url;
    }

    public HttpMethod getMethod()
    {
        if (this.method.equals(POST))
        {
            return HttpMethod.POST;
        }
        else
        {
            return HttpMethod.GET;
        }
    }

    public List<NameValuePair> getParameters()
    {
        // process bean shell part
        if (interpreter != null && parameters != null)
        {
            // create new list
            final List<NameValuePair> result = new ArrayList<NameValuePair>(parameters.size());
            
            // process all
            for (final NameValuePair pair : parameters)
            {
                final String name =  interpreter.processDynamicData(pair.getName());
                String value = pair.getValue();
                value = value != null ? interpreter.processDynamicData(value) : value;
                
                result.add(new NameValuePair(name, value));
            }
            
            return result;
        }
        else
        {
            return parameters;
        }
    }

    public HttpResponseCodeValidator getHttpResponseCodeValidator()
    {
        return httpResponseCodeValidator;
    }

    public String getXPath()
    {
        // process bean shell part
        return interpreter != null ? interpreter.processDynamicData(xPath) : xPath;    
    }

    public Pattern getRegexp()
    {
        // process bean shell part
        return interpreter != null && regexpString != null? RegExUtils.getPattern(interpreter.processDynamicData(regexpString)) : regexp;    
    }

    public String getText()
    {
        // process bean shell part
        return interpreter != null ? interpreter.processDynamicData(text) : text;    
    }

    public boolean isEncoded()
    {
        return encoded;
    }

    public ParamInterpreter getInterpreter()
    {
        return interpreter;
    }

}
