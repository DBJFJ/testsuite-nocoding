################################################################################################
#
# CSV-based URL Action Definition
#
# This is the definition of url actions as GET or POST including
# parameters and validation.
# 
# Format Details and defaults when not set 
# 
# Name:			the name of the action (Action-<recordNumber>)
# URL:			an url (mandatory)
# Method:		which method of GET or POST (GET)
# Parameters:	which parameters to send (none), when GET, this can be already part of the url
# ResponseCode:	which http response code is expected (200)
# XPath:		XPath for validation (none) only used when TURL
# RegExp:		regexp for validation (none) only used when TLWURL
# Text:			Text for validation against the xpath/regexp result or just searched on the page (none) 
# Encoded:		whether or not url and parameters are already encoded (false)
#
# Comments and empty lines are permitted. Header lines have to be valid. Additional header lines
# are not permitted as well as the spelling has to match including upper/lower-casing.
#
# Additional placeholders give you the ability to insert random data into the lines. The columns
# URL, Parameters, XPath, Text, and RegExp support it.
#
# ${NOW} : Current timestamp in milliseconds
# ${RANDOM.String(x)} : a random string with length x. Contains [A-Za-z].   
# ${RANDOM.String(x, s)} : a random string with length x. Contains characters from s.   
# ${RANDOM.Number(max)} : returns an integer between 0 (inclusive) and max (inclusive)   
# ${RANDOM.Number(min, max)} : returns an integer between min (inclusive) and max (inclusive)   
#
# Additionally you can use DATA which is an instance if the GeneralDataProvider. So things like
# ${DATA.getStreet(false)} or ${DATA.getTrulyUniqueEmail("xyzqtar987654.com")} will work.
# You can basically write a lot into this command, because it is a beanshell. 
#
# The character $ is right now NOT supported within the command.
#
#################################################################################################
Name,URL,Method,Parameters,ResponseCode,XPath,Text,Encoded

# Just load the homepage
Homepage,"http://localhost:8080/pebble/",GET,,200,id('blogName'),"Pebble Test Suite",false

# Just log on
Login,"http://localhost:8080/pebble/j_acegi_security_check",POST,"redirectUrl=%2F&j_username=username&j_password=password",200,"id('sidebar')/div[@class='sidebarItem']/div[@class='sidebarItemTitle']/span","Logged in as username",true

# Goto to new article creation, verify existence of xpath only
NewArticle,"http://localhost:8080/pebble/addBlogEntry.secureaction#form",GET,,200,"id('content')/div[@class='contentItem unpublished']",,false

# Save article, It will use NOW as data and store it in entry.
SaveArticle,"http://localhost:8080/pebble/saveBlogEntry.secureaction#preview",POST,"attachmentSize=&attachmentType=&attachmentUrl=&body=%3Cp%3E%0D%0A${DATA.getText(3,6,false)}%0D%0A%3C%2Fp%3E&commentsEnabled=true&date=21-Apr-2013%2011%3A57&entry=${entry = NOW}&excerpt=${DATA.getText(1, false)}&originalPermalink=&persistent=false&submit=Save&subtitle=Sub ${RANDOM.String(25)}&tags=&timeZone=Europe%2FLondon&title=Title ${RANDOM.String(25)}&trackBacksEnabled=true",200,//input[@value='Publish'],,true

# Publish, does not work yet, because dynamic data, so we are verifying a dead page here instead :)
Publish,"http://localhost:8080/pebble/manageBlogEntry.secureaction",POST,"entry=${entry}&submit=Publish",404,,,false

# DOES NOT WORK, because application does not accept article IDs provided. We will use the previously stored data for that submit.
# ConfirmPublish,"http://localhost:8080/pebble/publishBlogEntry.secureaction",POST,"date=21-Apr-2013%2013%3A06&entry=${entry}&publishDate=as-is&submit=Publish",200,,,true

# Logout, GET does not need the parameters, it can be part of the url already
Logout,"http://localhost:8080/pebble/logout.action?redirectUrl=http://localhost:8080/pebble/",GET,,200,id('loginForm'),,false